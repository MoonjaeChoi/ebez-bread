# Supabase Configuration
VITE_SUPABASE_URL=your_supabase_url_here
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Application Settings
VITE_APP_NAME=에벤에셀(eVeNeZeR) 교회 관리 시스템
VITE_APP_VERSION=1.0.0


#Netlify 대시보드 로그인: Netlify 계정에 로그인하고 문제가 발생한 프로젝트를 선택합니다.
#Site settings (사이트 설정)으로 이동: 해당 프로젝트의 "Site settings"로 이동합니다.
#Build & deploy (빌드 및 배포) 설정 확인: 왼쪽 메뉴에서 "Build & deploy"를 선택한 다음, "Continuous Deployment" 섹션에서 "Build settings"를 찾습니다.
#Publish directory (배포 디렉토리) 수정:
#Base directory (기본 디렉토리): 프로젝트의 루트 디렉토리 (보통 빈칸이거나 /로 설정되어 있습니다).
#Build command (빌드 명령어): Next.js의 기본 빌드 명령어인 next build로 설정되어 있는지 확인합니다.
#Publish directory (배포 디렉토리): 이 부분이 중요합니다. Next.js 프로젝트의 경우, 빌드된 파일들이 생성되는 디렉토리를 지정해야 합니다. 일반적으로 Next.js는 out 디렉토리에 정적 빌드 파일을 생성하거나, Netlify 플러그인이 .next 디렉토리의 내용을 처리합니다.
#권장 설정:
#Next.js 12 버전 이상에서 next export를 사용하지 않고 SSG(Static Site Generation)를 사용한다면, Publish directory를 **out**으로 설정해야 합니다. (Next.js 12부터 next export 명령어 없이 next build만으로 out 디렉토리에 정적 파일 생성 가능)
#만약 Netlify Next.js 플러그인을 사용하여 서버리스 함수 등을 활용하고 있다면, Publish directory를 **.next**로 설정하고, Netlify가 자동으로 나머지 처리를 하도록 할 수 있습니다.
#가장 일반적인 해결책은 Publish directory를 out으로 변경하는 것입니다.
#Save (저장): 변경 사항을 저장합니다.
#Re-deploy (재배포): 변경된 설정으로 다시 배포를 시도합니다.


#process.env.APP_NAME;

#1.  **빌드 시점에만 적용되는 환경 변수 (서버 사이드 및 빌드 타임)**
#
#    *   **변수명:** `NEXT_PUBLIC_` 접두사가 **없는** 환경 변수 (예: `DB_HOST=my_database`)
#    *   **적용 시점:** `next build` 명령을 실행할 때 환경 변수 값이 확정됩니다. 이 값은 서버 사이드 코드(API 라우트, `getServerSideProps`, `getStaticProps` 등)에서 사용될 때 적용됩니다.
#
#2.  **클라이언트 사이드에서도 접근 가능한 환경 변수 (빌드 시점 + 런타임)**
#
#    *   **변수명:** `NEXT_PUBLIC_` 접두사가 **있는** 환경 변수 (예: `NEXT_PUBLIC_GA_ID=UA-XXXXX-Y`)
#    *   **적용 시점:**
#        *   **빌드 시점:** 빌드 과정에서 이 변수들이 클라이언트 사이드 JavaScript 번들 내에 포함됩니다.
#        *   **화면 로딩 시점 (런타임):** 브라우저에서 페이지가 로드될 때, 클라이언트 사이드 JavaScript 코드에서 `process.env.NEXT_PUBLIC_변수명` 형태로 접근하여 사용됩니다.

#// .env 파일
#API_SECRET_KEY=super_secret_key
#
#// pages/api/data.js (서버 사이드)
#export default function handler(req, res) {
#  const apiKey = process.env.API_SECRET_KEY; // 빌드 시점에 확정된 값 사용
#  res.status(200).json({ data: 'Protected data', key: apiKey });
#}

#작업전 git pull origin main

#git add . : 스테이지에 작업한 파일을 추가
#git commit -m "코멘트" : 스테이지에 올라와 있는 파일을 커밋하고 코멘트를 남기기
#git push origin main: 커밋된 변경 사항들을 원격 저장소(예: GitHub)로 푸시(업로드)합니다. 

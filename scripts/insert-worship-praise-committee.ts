import { PrismaClient, OrganizationLevel } from '@prisma/client'

const prisma = new PrismaClient()

async function insertWorshipPraiseCommittee() {
  console.log('üèõÔ∏è Inserting Worship & Praise Committee organizations with ÍπÄÏùÄÌòú as creator...')

  try {
    // 1. ÍµêÌöå ID Ï°∞Ìöå
    const church = await prisma.church.findFirst()
    if (!church) {
      throw new Error('No church found in database')
    }

    // 2. ÍπÄÏùÄÌòú ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
    const kimEunhyeUser = await prisma.user.findFirst({
      where: { 
        name: 'ÍπÄÏùÄÌòú',
        churchId: church.id 
      }
    })

    if (!kimEunhyeUser) {
      throw new Error('ÍπÄÏùÄÌòú user not found. Please create the user first.')
    }

    console.log(`Using church: ${church.name} (${church.id})`)
    console.log(`Using creator: ${kimEunhyeUser.name} (${kimEunhyeUser.id})`)

    // 3. ÏòàÎ∞∞Ï∞¨ÏñëÏúÑÏõêÌöå Ï°∞ÏßÅ Îç∞Ïù¥ÌÑ∞ (Í≥ÑÏ∏µ Íµ¨Ï°∞ Ìè¨Ìï®)
    const worshipOrganizations = [
      // LEVEL_1: ÏòàÎ∞∞Ï∞¨ÏñëÏúÑÏõêÌöå
      {
        name: 'ÏòàÎ∞∞Ï∞¨ÏñëÏúÑÏõêÌöå',
        englishName: 'Worship & Praise Committee',
        code: 'WC-WP',
        description: 'ÏòàÎ∞∞ÏôÄ Ï∞¨Ïñë Í¥ÄÎ†® ÏóÖÎ¨¥Î•º Ï¥ùÍ¥ÑÌïòÎäî ÏúÑÏõêÌöåÏûÖÎãàÎã§. LEVEL_1 Ï°∞ÏßÅÏûÖÎãàÎã§.',
        level: OrganizationLevel.LEVEL_1,
        parentCode: null
      },
      // LEVEL_2: ÏúÑÏõêÌöå ÌïòÏúÑ Î∂ÄÏÑúÎì§
      {
        name: 'ÏòàÎ∞∞Î∂Ä',
        englishName: 'Worship & Praise Committee Worship Department',
        code: 'WC-WP-WB',
        description: 'ÏòàÎ∞∞Ï∞¨ÏñëÏúÑÏõêÌöåÏùò ÏòàÎ∞∞Î•º Îã¥ÎãπÌïòÎäî Î∂ÄÏÑúÏûÖÎãàÎã§. LEVEL_2 Î∂ÄÏÑúÏûÖÎãàÎã§.',
        level: OrganizationLevel.LEVEL_2,
        parentCode: 'WC-WP'
      },
      {
        name: 'ÏÑ±Î°ÄÎ∂Ä',
        englishName: 'Worship & Praise Committee Sacraments Department',
        code: 'WC-WP-SC',
        description: 'ÏòàÎ∞∞Ï∞¨ÏñëÏúÑÏõêÌöåÏùò ÏÑ±Î°ÄÎ•º Îã¥ÎãπÌïòÎäî Î∂ÄÏÑúÏûÖÎãàÎã§. LEVEL_2 Î∂ÄÏÑúÏûÖÎãàÎã§.',
        level: OrganizationLevel.LEVEL_2,
        parentCode: 'WC-WP'
      },
      {
        name: 'Í∏∞ÎèÑÏÇ¨Ïó≠Î∂Ä',
        englishName: 'Worship & Praise Committee Prayer Ministry Department',
        code: 'WC-WP-PM',
        description: 'ÏòàÎ∞∞Ï∞¨ÏñëÏúÑÏõêÌöåÏùò Í∏∞ÎèÑ ÏÇ¨Ïó≠ÏùÑ Îã¥ÎãπÌïòÎäî Î∂ÄÏÑúÏûÖÎãàÎã§. LEVEL_2 Î∂ÄÏÑúÏûÖÎãàÎã§.',
        level: OrganizationLevel.LEVEL_2,
        parentCode: 'WC-WP'
      },
      {
        name: 'Ïñ¥Î®∏ÎãàÍ∏∞ÎèÑÌöåÎ∂Ä',
        englishName: 'Worship & Praise Committee Mothers\' Prayer Meeting Department',
        code: 'WC-WP-MP',
        description: 'ÏòàÎ∞∞Ï∞¨ÏñëÏúÑÏõêÌöåÏùò Ïñ¥Î®∏Îãà Í∏∞ÎèÑÌöåÎ•º Îã¥ÎãπÌïòÎäî Î∂ÄÏÑúÏûÖÎãàÎã§. LEVEL_2 Î∂ÄÏÑúÏûÖÎãàÎã§.',
        level: OrganizationLevel.LEVEL_2,
        parentCode: 'WC-WP'
      },
      {
        name: 'Ï∞¨Ïñë1Î∂Ä',
        englishName: 'Worship & Praise Committee Praise 1 Department',
        code: 'WC-WP-P1',
        description: 'ÏòàÎ∞∞Ï∞¨ÏñëÏúÑÏõêÌöåÏùò Ï∞¨Ïñë 1Î∂ÄÎ•º Îã¥ÎãπÌïòÎäî Î∂ÄÏÑúÏûÖÎãàÎã§. LEVEL_2 Î∂ÄÏÑúÏûÖÎãàÎã§.',
        level: OrganizationLevel.LEVEL_2,
        parentCode: 'WC-WP'
      },
      // LEVEL_3: Ï∞¨Ïñë1Î∂Ä ÌïòÏúÑ Ï∞¨ÏñëÎåÄÎì§
      {
        name: 'ÏÉ¨Î°¨',
        englishName: 'Worship & Praise Committee Praise 1 Department Shalom Choir',
        code: 'WC-WP-P1-SL',
        description: 'Ï∞¨Ïñë 1Î∂Ä ÏÜåÏÜç ÏÉ¨Î°¨ Ï∞¨ÏñëÎåÄÏûÖÎãàÎã§. LEVEL_3 ÏÑ∏Î∂ÄÎ∂ÄÏÑúÏûÖÎãàÎã§.',
        level: OrganizationLevel.LEVEL_3,
        parentCode: 'WC-WP-P1'
      },
      {
        name: 'Ìò∏ÏÇ∞ÎÇò',
        englishName: 'Worship & Praise Committee Praise 1 Department Hosanna Choir',
        code: 'WC-WP-P1-HS',
        description: 'Ï∞¨Ïñë 1Î∂Ä ÏÜåÏÜç Ìò∏ÏÇ∞ÎÇò Ï∞¨ÏñëÎåÄÏûÖÎãàÎã§. LEVEL_3 ÏÑ∏Î∂ÄÎ∂ÄÏÑúÏûÖÎãàÎã§.',
        level: OrganizationLevel.LEVEL_3,
        parentCode: 'WC-WP-P1'
      }
    ]

    // 4. Í∏∞Ï°¥ Ï°∞ÏßÅ ÌôïÏù∏ (Ï§ëÎ≥µ Î∞©ÏßÄ)
    console.log('\nüîç Checking for existing organizations and code conflicts...')
    
    const proposedCodes = worshipOrganizations.map(org => org.code)
    const existingOrganizations = await prisma.organization.findMany({
      where: {
        code: { in: proposedCodes }
      },
      select: { id: true, code: true, name: true, englishName: true, level: true }
    })

    if (existingOrganizations.length > 0) {
      console.log(`Found ${existingOrganizations.length} potential conflicts:`)
      existingOrganizations.forEach(org => {
        console.log(`   - ${org.name} (${org.code}) - ${org.level}`)
      })
    }

    // 5. Ï§ëÎ≥µÏù¥ ÏóÜÎäî ÏÉà Ï°∞ÏßÅÎßå ÌïÑÌÑ∞ÎßÅ
    const existingCodesSet = new Set(existingOrganizations.map(o => o.code))
    const newOrganizations = worshipOrganizations.filter(org => !existingCodesSet.has(org.code))

    console.log(`\nüìù Will create ${newOrganizations.length} new organizations`)
    if (newOrganizations.length === 0) {
      console.log('‚úÖ All organizations already exist - no new insertions needed')
      return
    }

    // 6. Ï°∞ÏßÅÏùÑ Î†àÎ≤® ÏàúÏÑúÎåÄÎ°ú Ï†ïÎ†¨ÌïòÏó¨ Î∂ÄÎ™®-ÏûêÏãù Í¥ÄÍ≥Ñ Î≥¥Ïû•
    const sortedOrganizations = newOrganizations.sort((a, b) => {
      const levelOrder = { 'LEVEL_1': 1, 'LEVEL_2': 2, 'LEVEL_3': 3, 'LEVEL_4': 4 }
      return levelOrder[a.level] - levelOrder[b.level]
    })

    // 7. ÌòÑÏû¨ ÏµúÎåÄ sortOrder ÌôïÏù∏
    const maxSortOrder = await prisma.organization.findFirst({
      where: {
        churchId: church.id,
        OR: [
          { level: OrganizationLevel.LEVEL_1 },
          { parentId: { not: null } }
        ]
      },
      select: { sortOrder: true },
      orderBy: { sortOrder: 'desc' }
    })

    let currentSortOrder = (maxSortOrder?.sortOrder || 0) + 1

    // 8. Ï°∞ÏßÅ ÏÉùÏÑ± (Í≥ÑÏ∏µ ÏàúÏÑúÎåÄÎ°ú)
    console.log('\nüèóÔ∏è  Creating new Worship & Praise Committee organizations...')
    let createdCount = 0
    let skippedCount = 0
    const createdOrganizations: { [code: string]: any } = {}

    for (const orgData of sortedOrganizations) {
      try {
        // Î∂ÄÎ™® Ï°∞ÏßÅ ID Ï∞æÍ∏∞
        let parentId = null
        if (orgData.parentCode) {
          // Î®ºÏ†Ä ÏÉàÎ°ú ÏÉùÏÑ±Îêú Ï°∞ÏßÅÏóêÏÑú Ï∞æÍ∏∞
          if (createdOrganizations[orgData.parentCode]) {
            parentId = createdOrganizations[orgData.parentCode].id
          } else {
            // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Ï∞æÍ∏∞
            const parentOrg = await prisma.organization.findFirst({
              where: { code: orgData.parentCode }
            })
            if (parentOrg) {
              parentId = parentOrg.id
            } else {
              console.log(`‚ö†Ô∏è  Parent organization not found for ${orgData.code}: ${orgData.parentCode}`)
              continue
            }
          }
        }

        const created = await prisma.organization.create({
          data: {
            code: orgData.code,
            name: orgData.name,
            englishName: orgData.englishName,
            description: orgData.description,
            level: orgData.level,
            parentId: parentId,
            churchId: church.id,
            createdById: kimEunhyeUser.id,
            sortOrder: currentSortOrder++,
            isActive: true,
          },
          include: {
            createdBy: {
              select: { name: true, email: true }
            },
            parent: {
              select: { name: true, code: true }
            }
          }
        })

        // ÏÉùÏÑ±Îêú Ï°∞ÏßÅÏùÑ ÎßµÏóê Ï†ÄÏû• (ÏûêÏãù Ï°∞ÏßÅÏóêÏÑú Ï∞∏Ï°∞Ìï† Ïàò ÏûàÎèÑÎ°ù)
        createdOrganizations[orgData.code] = created
        
        console.log(`‚úÖ Created ${orgData.level}: ${orgData.name} (${orgData.code})`)
        console.log(`   Parent: ${created.parent?.name || 'None'} (${created.parent?.code || 'N/A'})`)
        console.log(`   Sort Order: ${created.sortOrder}`)
        console.log(`   Created By: ${created.createdBy?.name}`)
        console.log(`   Created At: ${created.createdAt.toISOString()}`)
        createdCount++
        
      } catch (error: any) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è  Organization already exists (unique constraint): ${orgData.name} (${orgData.code})`)
          skippedCount++
        } else {
          console.error(`‚ùå Error creating organization ${orgData.code}:`, error.message)
          skippedCount++
        }
      }
    }

    // 9. ÏÉùÏÑ±Îêú Ï°∞ÏßÅÎì§Ïùò Í≥ÑÏ∏µÍµ¨Ï°∞ ÌôïÏù∏
    const worshipCommittee = createdOrganizations['WC-WP'] || 
      await prisma.organization.findFirst({ where: { code: 'WC-WP' } })

    if (worshipCommittee) {
      const totalSubOrgs = await prisma.organization.count({
        where: {
          OR: [
            { parentId: worshipCommittee.id },
            { 
              parent: {
                parentId: worshipCommittee.id
              }
            }
          ]
        }
      })

      console.log(`\nüìä Worship & Praise Committee Organization Summary:`)
      console.log(`   New organizations to create: ${worshipOrganizations.length}`)
      console.log(`   Already existing: ${existingOrganizations.length}`)
      console.log(`   Successfully created: ${createdCount}`)
      console.log(`   Skipped (conflicts/errors): ${skippedCount}`)
      console.log(`   Total sub-organizations under committee: ${totalSubOrgs}`)
    }

    if (createdCount > 0) {
      console.log('\nüéâ Worship & Praise Committee organizations successfully inserted!')
    } else if (skippedCount === worshipOrganizations.length) {
      console.log('\n‚úÖ All requested organizations already exist')
    }

    return {
      requested: worshipOrganizations.length,
      created: createdCount,
      existing: existingOrganizations.length,
      skipped: skippedCount,
      levels: {
        level1: worshipOrganizations.filter(o => o.level === 'LEVEL_1').length,
        level2: worshipOrganizations.filter(o => o.level === 'LEVEL_2').length,
        level3: worshipOrganizations.filter(o => o.level === 'LEVEL_3').length
      }
    }

  } catch (error) {
    console.error('‚ùå Error inserting Worship & Praise Committee organizations:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

insertWorshipPraiseCommittee().catch(console.error)
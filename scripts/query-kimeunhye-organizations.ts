import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function queryKimEunhyeOrganizations() {
  console.log('üîç Querying organizations created by ÍπÄÏùÄÌòú...\n')

  try {
    // 1. ÍπÄÏùÄÌòú ÏÇ¨Ïö©Ïûê ID Ï°∞Ìöå
    const kimEunhyeUser = await prisma.user.findFirst({
      where: { name: 'ÍπÄÏùÄÌòú' },
      select: { id: true, name: true, email: true, role: true }
    })

    if (!kimEunhyeUser) {
      throw new Error('ÍπÄÏùÄÌòú user not found')
    }

    console.log(`üë§ Target User: ${kimEunhyeUser.name} (${kimEunhyeUser.email})`)
    console.log(`   Role: ${kimEunhyeUser.role}`)
    console.log(`   ID: ${kimEunhyeUser.id}\n`)

    // 2. Í∏∞Î≥∏ Ï°∞Ìöå: ÍπÄÏùÄÌòúÍ∞Ä ÏÉùÏÑ±Ìïú Î™®Îì† Ï°∞ÏßÅ
    console.log('üìã Query 1: ÍπÄÏùÄÌòúÍ∞Ä ÏÉùÏÑ±Ìïú Î™®Îì† Ï°∞ÏßÅ')
    console.log('========================================')
    
    const allOrganizations = await prisma.organization.findMany({
      where: {
        createdById: kimEunhyeUser.id
      },
      include: {
        createdBy: {
          select: { id: true, name: true, email: true }
        },
        updatedBy: {
          select: { id: true, name: true, email: true }
        },
        church: {
          select: { id: true, name: true }
        },
        parent: {
          select: { id: true, name: true, code: true }
        },
        _count: {
          select: {
            children: true,
            budgets: true,
            budgetItems: true,
            expenseReports: true,
            organizationMemberships: true
          }
        }
      },
      orderBy: [
        { level: 'asc' },
        { sortOrder: 'asc' },
        { createdAt: 'asc' }
      ]
    })

    console.log(`Found ${allOrganizations.length} organizations created by ÍπÄÏùÄÌòú:\n`)

    allOrganizations.forEach((org, index) => {
      console.log(`${index + 1}. ${org.name} (${org.code})`)
      console.log(`   Level: ${org.level}`)
      console.log(`   English Name: ${org.englishName || 'N/A'}`)
      console.log(`   Description: ${org.description || 'N/A'}`)
      console.log(`   Parent: ${org.parent?.name || 'None'} (${org.parent?.code || 'N/A'})`)
      console.log(`   Created: ${org.createdAt.toISOString()}`)
      console.log(`   Updated: ${org.updatedAt.toISOString()}`)
      console.log(`   Updated By: ${org.updatedBy?.name || 'NULL'}`)
      console.log(`   Sort Order: ${org.sortOrder}`)
      console.log(`   Active: ${org.isActive}`)
      console.log(`   Children: ${org._count.children}`)
      console.log(`   Budgets: ${org._count.budgets}`)
      console.log(`   Budget Items: ${org._count.budgetItems}`)
      console.log(`   Expense Reports: ${org._count.expenseReports}`)
      console.log(`   Memberships: ${org._count.organizationMemberships}`)
      console.log('')
    })

    // 3. LEVELÎ≥Ñ Ï°∞Ìöå
    console.log('\nüìä Query 2: ÍπÄÏùÄÌòúÍ∞Ä ÏÉùÏÑ±Ìïú Ï°∞ÏßÅ - Î†àÎ≤®Î≥Ñ Î∂ÑÎ•ò')
    console.log('===============================================')
    
    const organizationsByLevel = await prisma.organization.groupBy({
      by: ['level'],
      where: {
        createdById: kimEunhyeUser.id
      },
      _count: {
        _all: true
      },
      orderBy: {
        level: 'asc'
      }
    })

    organizationsByLevel.forEach(group => {
      console.log(`${group.level}: ${group._count._all} organizations`)
    })

    // 4. ÍµêÍµ¨Îßå Ï°∞Ìöå (PR- ÏΩîÎìúÎ°ú ÏãúÏûë)
    console.log('\nüèõÔ∏è Query 3: ÍπÄÏùÄÌòúÍ∞Ä ÏÉùÏÑ±Ìïú ÍµêÍµ¨ Ï°∞ÏßÅ (PR- ÏΩîÎìú)')
    console.log('===============================================')
    
    const parishOrganizations = await prisma.organization.findMany({
      where: {
        createdById: kimEunhyeUser.id,
        code: {
          startsWith: 'PR-'
        }
      },
      include: {
        createdBy: {
          select: { name: true, email: true }
        }
      },
      orderBy: {
        sortOrder: 'asc'
      }
    })

    console.log(`Found ${parishOrganizations.length} parish organizations:\n`)

    parishOrganizations.forEach((org, index) => {
      console.log(`${index + 1}. ${org.name}`)
      console.log(`   Code: ${org.code}`)
      console.log(`   English Name: ${org.englishName}`)
      console.log(`   Created: ${org.createdAt.toISOString()}`)
      console.log(`   Sort Order: ${org.sortOrder}`)
      console.log('')
    })

    // 5. ÏµúÍ∑º ÏÉùÏÑ±Îêú Ï°∞ÏßÅ (ÏµúÍ∑º 7Ïùº)
    console.log('\nüìÖ Query 4: ÍπÄÏùÄÌòúÍ∞Ä ÏµúÍ∑º 7ÏùºÍ∞Ñ ÏÉùÏÑ±Ìïú Ï°∞ÏßÅ')
    console.log('==========================================')
    
    const sevenDaysAgo = new Date()
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7)

    const recentOrganizations = await prisma.organization.findMany({
      where: {
        createdById: kimEunhyeUser.id,
        createdAt: {
          gte: sevenDaysAgo
        }
      },
      include: {
        createdBy: {
          select: { name: true, email: true }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    })

    console.log(`Found ${recentOrganizations.length} organizations created in the last 7 days:\n`)

    recentOrganizations.forEach((org, index) => {
      const daysAgo = Math.floor((Date.now() - org.createdAt.getTime()) / (1000 * 60 * 60 * 24))
      console.log(`${index + 1}. ${org.name} (${org.code})`)
      console.log(`   Created: ${org.createdAt.toISOString()} (${daysAgo} days ago)`)
      console.log(`   Level: ${org.level}`)
      console.log('')
    })

    // 6. ÍπÄÏùÄÌòúÍ∞Ä ÏàòÏ†ïÌïú Ï°∞ÏßÅ (ÏÉùÏÑ±ÏûêÏôÄ ÏàòÏ†ïÏûêÍ∞Ä Îã§Î•º Ïàò ÏûàÏùå)
    console.log('\n‚úèÔ∏è  Query 5: ÍπÄÏùÄÌòúÍ∞Ä ÏàòÏ†ïÌïú Ï°∞ÏßÅ (ÏÉùÏÑ±Ïûê Î∂àÎ¨∏)')
    console.log('==========================================')
    
    const updatedOrganizations = await prisma.organization.findMany({
      where: {
        updatedById: kimEunhyeUser.id
      },
      include: {
        createdBy: {
          select: { name: true, email: true }
        },
        updatedBy: {
          select: { name: true, email: true }
        }
      },
      orderBy: {
        updatedAt: 'desc'
      }
    })

    console.log(`Found ${updatedOrganizations.length} organizations updated by ÍπÄÏùÄÌòú:\n`)

    updatedOrganizations.forEach((org, index) => {
      console.log(`${index + 1}. ${org.name} (${org.code})`)
      console.log(`   Created By: ${org.createdBy?.name || 'NULL'}`)
      console.log(`   Updated By: ${org.updatedBy?.name || 'NULL'}`)
      console.log(`   Created: ${org.createdAt.toISOString()}`)
      console.log(`   Updated: ${org.updatedAt.toISOString()}`)
      console.log('')
    })

    // 7. ÌÜµÍ≥Ñ ÏöîÏïΩ
    console.log('\nüìä Summary Statistics')
    console.log('====================')
    console.log(`Total organizations created by ÍπÄÏùÄÌòú: ${allOrganizations.length}`)
    console.log(`Parish organizations (PR-*): ${parishOrganizations.length}`)
    console.log(`Organizations updated by ÍπÄÏùÄÌòú: ${updatedOrganizations.length}`)
    console.log(`Recent organizations (last 7 days): ${recentOrganizations.length}`)
    
    // LevelÎ≥Ñ ÏöîÏïΩ
    console.log('\nBy Level:')
    organizationsByLevel.forEach(group => {
      console.log(`  ${group.level}: ${group._count._all}`)
    })

    // ÌôúÏÑ±/ÎπÑÌôúÏÑ± ÏÉÅÌÉú
    const activeCount = allOrganizations.filter(o => o.isActive).length
    const inactiveCount = allOrganizations.filter(o => !o.isActive).length
    console.log('\nBy Status:')
    console.log(`  Active: ${activeCount}`)
    console.log(`  Inactive: ${inactiveCount}`)

    return {
      total: allOrganizations.length,
      parishes: parishOrganizations.length,
      updated: updatedOrganizations.length,
      recent: recentOrganizations.length,
      active: activeCount,
      inactive: inactiveCount
    }

  } catch (error) {
    console.error('‚ùå Error querying ÍπÄÏùÄÌòú organizations:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

queryKimEunhyeOrganizations().catch(console.error)
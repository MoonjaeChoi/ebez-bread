import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkMemberLoginCapability() {
  console.log('üîê Checking member login capability...\n')

  try {
    // 1. Ï†ÑÏ≤¥ Î©§Î≤Ñ Ïàò Ï°∞Ìöå
    const totalMembers = await prisma.member.count()
    console.log(`üë• Ï¥ù Îì±Î°ùÎêú Î©§Î≤Ñ Ïàò: ${totalMembers}Î™Ö`)

    // 2. Ïù¥Î©îÏùºÏù¥ ÏûàÎäî Î©§Î≤ÑÎì§ Ï°∞Ìöå
    const membersWithEmail = await prisma.member.findMany({
      where: {
        email: {
          not: null
        }
      },
      select: {
        id: true,
        name: true,
        email: true,
        phone: true,
        church: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: {
        name: 'asc'
      }
    })

    console.log(`üìß Ïù¥Î©îÏùºÏù¥ Îì±Î°ùÎêú Î©§Î≤Ñ Ïàò: ${membersWithEmail.length}Î™Ö\n`)

    // 3. users ÌÖåÏù¥Î∏îÍ≥º ÎπÑÍµêÌïòÏó¨ Î°úÍ∑∏Ïù∏ Í≥ÑÏ†ïÏù¥ ÏûàÎäî Î©§Î≤ÑÎì§ ÌôïÏù∏
    console.log('üîç Î©§Î≤ÑÎ≥Ñ Î°úÍ∑∏Ïù∏ Í≥ÑÏ†ï ÌòÑÌô©:')
    console.log('================================')

    let loginCapableCount = 0
    let noLoginAccountCount = 0
    const loginResults = []

    for (const member of membersWithEmail) {
      // Ìï¥Îãπ Ïù¥Î©îÏùºÎ°ú users ÌÖåÏù¥Î∏îÏóê Í≥ÑÏ†ïÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
      const userAccount = await prisma.user.findFirst({
        where: {
          email: member.email!,
          churchId: member.church.id
        },
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          isActive: true,
          createdAt: true
        }
      })

      const result = {
        member,
        userAccount,
        canLogin: !!userAccount && userAccount.isActive
      }

      loginResults.push(result)

      if (result.canLogin) {
        loginCapableCount++
        console.log(`‚úÖ ${member.name} (${member.email})`)
        console.log(`   User Account: ${userAccount!.name} - ${userAccount!.role}`)
        console.log(`   Active: ${userAccount!.isActive ? 'Yes' : 'No'}`)
        console.log(`   Created: ${userAccount!.createdAt.toISOString()}`)
      } else {
        noLoginAccountCount++
        console.log(`‚ùå ${member.name} (${member.email})`)
        console.log(`   User Account: ÏóÜÏùå`)
      }
      console.log('')
    }

    // 4. ÌÜµÍ≥Ñ ÏöîÏïΩ
    console.log('üìä Î°úÍ∑∏Ïù∏ Í≥ÑÏ†ï ÌòÑÌô© ÏöîÏïΩ:')
    console.log('=======================')
    console.log(`Ï¥ù Î©§Î≤Ñ Ïàò: ${totalMembers}Î™Ö`)
    console.log(`Ïù¥Î©îÏùº Î≥¥Ïú† Î©§Î≤Ñ: ${membersWithEmail.length}Î™Ö`)
    console.log(`Î°úÍ∑∏Ïù∏ Í∞ÄÎä• Î©§Î≤Ñ: ${loginCapableCount}Î™Ö ‚úÖ`)
    console.log(`Î°úÍ∑∏Ïù∏ Î∂àÍ∞Ä Î©§Î≤Ñ: ${noLoginAccountCount}Î™Ö ‚ùå`)

    const loginPercentage = membersWithEmail.length > 0 ? 
      ((loginCapableCount / membersWithEmail.length) * 100).toFixed(1) : '0'
    
    console.log(`Î°úÍ∑∏Ïù∏ Í∞ÄÎä• ÎπÑÏú®: ${loginPercentage}%`)

    // 5. Î°úÍ∑∏Ïù∏ Í∞ÄÎä•Ìïú ÏÇ¨Ïö©ÏûêÎì§Ïùò Ïó≠Ìï†Î≥Ñ Î∂ÑÌè¨
    console.log('\nüë§ Î°úÍ∑∏Ïù∏ Í∞ÄÎä• ÏÇ¨Ïö©Ïûê Ïó≠Ìï†Î≥Ñ Î∂ÑÌè¨:')
    console.log('=================================')
    
    const roleDistribution: { [key: string]: number } = {}
    loginResults.filter(r => r.canLogin).forEach(result => {
      const role = result.userAccount!.role
      roleDistribution[role] = (roleDistribution[role] || 0) + 1
    })

    Object.entries(roleDistribution).forEach(([role, count]) => {
      const roleEmoji = role === 'SUPER_ADMIN' ? 'üëë' :
                       role === 'ADMIN' ? 'üë®‚Äçüíº' :
                       role === 'MANAGER' ? 'üë®‚Äçüíª' :
                       role === 'STAFF' ? 'üë®‚Äçüîß' :
                       role === 'LEADER' ? 'üë•' :
                       role === 'MEMBER' ? 'üë§' : 'üîπ'
      
      console.log(`${roleEmoji} ${role}: ${count}Î™Ö`)
    })

    // 6. Ïù¥Î©îÏùºÏùÄ ÏûàÏßÄÎßå Î°úÍ∑∏Ïù∏ Í≥ÑÏ†ïÏù¥ ÏóÜÎäî Î©§Î≤ÑÎì§
    const membersWithoutLogin = loginResults.filter(r => !r.canLogin)
    
    if (membersWithoutLogin.length > 0) {
      console.log('\n‚ö†Ô∏è  Î°úÍ∑∏Ïù∏ Í≥ÑÏ†ïÏù¥ ÏóÜÎäî Î©§Î≤ÑÎì§ (Ïù¥Î©îÏùº Î≥¥Ïú†):')
      console.log('============================================')
      
      membersWithoutLogin.slice(0, 10).forEach((result, index) => {
        console.log(`${index + 1}. ${result.member.name} (${result.member.email})`)
        console.log(`   Ï†ÑÌôîÎ≤àÌò∏: ${result.member.phone || 'N/A'}`)
        console.log(`   ÍµêÌöå: ${result.member.church.name}`)
      })

      if (membersWithoutLogin.length > 10) {
        console.log(`   ... Í∑∏Ïô∏ ${membersWithoutLogin.length - 10}Î™Ö Îçî`)
      }
    }

    // 7. Ïã§Ï†ú Î°úÍ∑∏Ïù∏ ÌÖåÏä§Ìä∏ ÏïàÎÇ¥
    console.log('\nüîê Î°úÍ∑∏Ïù∏ ÌÖåÏä§Ìä∏ Î∞©Î≤ï:')
    console.log('=====================')
    console.log('1. Í∞úÎ∞ú ÏÑúÎ≤Ñ Ïã§Ìñâ: npm run dev')
    console.log('2. Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú http://localhost:3000 Ï†ëÏÜç')
    console.log('3. ÏïÑÎûò Í≥ÑÏ†ïÎì§Î°ú Î°úÍ∑∏Ïù∏ ÌÖåÏä§Ìä∏ Í∞ÄÎä•:')
    
    const testAccounts = loginResults.filter(r => r.canLogin).slice(0, 3)
    testAccounts.forEach((result, index) => {
      console.log(`   ${index + 1}. ${result.userAccount!.email}`)
      console.log(`      Ïù¥Î¶Ñ: ${result.userAccount!.name}`)
      console.log(`      Ïó≠Ìï†: ${result.userAccount!.role}`)
    })

    // 8. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï†ïÎ≥¥
    console.log('\nüîó Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï†ïÎ≥¥:')
    console.log('=========================')
    console.log(`ÌôòÍ≤Ω: ${process.env.NODE_ENV || 'development'}`)
    console.log(`Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ URL: ${process.env.DATABASE_URL ? 'ÏÑ§Ï†ïÎê®' : 'ÎØ∏ÏÑ§Ï†ï'}`)
    console.log(`Supabase Ïó∞Í≤∞: ${process.env.DATABASE_URL?.includes('supabase') ? '‚úÖ Ïò®ÎùºÏù∏' : 'Î°úÏª¨'}`)

    return {
      totalMembers,
      membersWithEmail: membersWithEmail.length,
      loginCapableCount,
      noLoginAccountCount,
      loginPercentage: parseFloat(loginPercentage),
      roleDistribution,
      membersWithoutLogin: membersWithoutLogin.length,
      testAccounts: testAccounts.map(r => ({
        email: r.userAccount!.email,
        name: r.userAccount!.name,
        role: r.userAccount!.role
      }))
    }

  } catch (error) {
    console.error('‚ùå Error checking member login capability:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

checkMemberLoginCapability().catch(console.error)
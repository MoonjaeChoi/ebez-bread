import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function seedOrganizationMemberships(churchId: string) {
  console.log('üë• Seeding organization memberships...')

  try {
    // Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
    const members = await prisma.member.findMany({
      where: { churchId },
      take: 10, // Ï≤òÏùå 10Î™ÖÎßå ÏÇ¨Ïö©
    })

    const organizations = await prisma.organization.findMany({
      where: { churchId },
      take: 5, // Ï≤òÏùå 5Í∞ú Ï°∞ÏßÅÎßå ÏÇ¨Ïö©
    })

    const roles = await prisma.organizationRole.findMany({
      where: { churchId, isActive: true },
      orderBy: { level: 'desc' },
    })

    if (members.length === 0 || organizations.length === 0 || roles.length === 0) {
      console.log('‚ö†Ô∏è  Insufficient data for membership seeding. Skipping...')
      return
    }

    console.log(`üìä Found ${members.length} members, ${organizations.length} organizations, ${roles.length} roles`)

    // ÏÉòÌîå Î©§Î≤ÑÏã≠ ÏÉùÏÑ±
    const sampleMemberships = [
      // Ï≤´ Î≤àÏß∏ Ï°∞ÏßÅÏùò Î¶¨ÎçîÏã≠
      {
        memberId: members[0]?.id,
        organizationId: organizations[0]?.id,
        roleId: roles.find(r => r.name === 'ÌöåÏû•')?.id || roles[0]?.id,
        isPrimary: true,
        joinDate: new Date('2020-01-01'),
        notes: 'Ï°∞ÏßÅ Ï∞ΩÎ¶Ω Î©§Î≤Ñ',
      },
      {
        memberId: members[1]?.id,
        organizationId: organizations[0]?.id,
        roleId: roles.find(r => r.name === 'ÏÑúÍ∏∞')?.id || roles[1]?.id,
        isPrimary: false,
        joinDate: new Date('2020-02-01'),
        notes: 'ÌöåÏùòÎ°ù ÏûëÏÑ± Îã¥Îãπ',
      },
      {
        memberId: members[2]?.id,
        organizationId: organizations[0]?.id,
        roleId: roles.find(r => r.name === 'ÌöåÍ≥Ñ')?.id,
        isPrimary: false,
        joinDate: new Date('2020-03-01'),
        notes: 'Ïû¨Ï†ï Í¥ÄÎ¶¨ Îã¥Îãπ',
      },

      // Îëê Î≤àÏß∏ Ï°∞ÏßÅ
      {
        memberId: members[3]?.id,
        organizationId: organizations[1]?.id,
        roleId: roles.find(r => r.name === 'Î∂ÄÏû•')?.id,
        isPrimary: true,
        joinDate: new Date('2019-06-01'),
        notes: 'Î∂ÄÏÑú Ï±ÖÏûÑÏûê',
      },
      {
        memberId: members[4]?.id,
        organizationId: organizations[1]?.id,
        roleId: roles.find(r => r.name === 'Ï¥ùÎ¨¥')?.id,
        isPrimary: false,
        joinDate: new Date('2019-08-01'),
      },

      // Îã§Ï§ë Ï°∞ÏßÅ ÏÜåÏÜç ÏòàÏãú
      {
        memberId: members[0]?.id, // Ï≤´ Î≤àÏß∏ Î©§Î≤ÑÍ∞Ä Îëê Î≤àÏß∏ Ï°∞ÏßÅÏóêÎèÑ ÏÜåÏÜç
        organizationId: organizations[1]?.id,
        roleId: roles.find(r => r.name === 'ÏûÑÏõê')?.id,
        isPrimary: false,
        joinDate: new Date('2021-01-01'),
        notes: 'Í≤∏ÏßÅ',
      },
      {
        memberId: members[5]?.id,
        organizationId: organizations[2]?.id,
        roleId: roles.find(r => r.name === 'Î¶¨Îçî')?.id,
        isPrimary: true,
        joinDate: new Date('2022-03-01'),
      },

      // ÏùºÎ∞ò Î©§Î≤ÑÎì§ (ÏßÅÏ±Ö ÏóÜÏùå)
      {
        memberId: members[6]?.id,
        organizationId: organizations[0]?.id,
        roleId: null,
        isPrimary: false,
        joinDate: new Date('2023-01-01'),
        notes: 'ÏùºÎ∞ò Î©§Î≤Ñ',
      },
      {
        memberId: members[7]?.id,
        organizationId: organizations[1]?.id,
        roleId: null,
        isPrimary: false,
        joinDate: new Date('2023-06-01'),
        notes: 'Ïã†Í∑ú Í∞ÄÏûÖ',
      },
    ]

    const createdMemberships = []
    for (const membership of sampleMemberships) {
      if (!membership.memberId || !membership.organizationId) {
        console.log('‚ö†Ô∏è  Skipping invalid membership data')
        continue
      }

      try {
        // Ï§ëÎ≥µ Ï≤¥ÌÅ¨
        const existing = await prisma.organizationMembership.findFirst({
          where: {
            memberId: membership.memberId,
            organizationId: membership.organizationId,
            isActive: true,
          },
        })

        if (existing) {
          console.log(`‚ö†Ô∏è  Membership already exists: ${membership.memberId} -> ${membership.organizationId}`)
          continue
        }

        const created = await prisma.organizationMembership.create({
          data: membership,
          include: {
            member: {
              select: {
                name: true,
              },
            },
            organization: {
              select: {
                name: true,
              },
            },
            role: {
              select: {
                name: true,
              },
            },
          },
        })

        createdMemberships.push(created)
        console.log(`‚úÖ Created membership: ${created.member.name} -> ${created.organization.name} (${created.role?.name || 'ÏùºÎ∞ò Î©§Î≤Ñ'})`)
      } catch (error: any) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è  Unique constraint violation for membership`)
        } else {
          console.error(`‚ùå Error creating membership:`, error.message)
        }
      }
    }

    // ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï∂úÎ†•
    const totalMemberships = await prisma.organizationMembership.count({
      where: {
        organization: {
          churchId,
        },
        isActive: true,
      },
    })

    const membershipsWithRoles = await prisma.organizationMembership.count({
      where: {
        organization: {
          churchId,
        },
        isActive: true,
        roleId: { not: null },
      },
    })

    const leadershipMemberships = await prisma.organizationMembership.count({
      where: {
        organization: {
          churchId,
        },
        isActive: true,
        role: {
          isLeadership: true,
        },
      },
    })

    console.log(`üë• Organization memberships seeding completed!`)
    console.log(`üìä Statistics:`)
    console.log(`   - Total active memberships: ${totalMemberships}`)
    console.log(`   - Memberships with roles: ${membershipsWithRoles}`)
    console.log(`   - Leadership positions: ${leadershipMemberships}`)
    console.log(`   - General members: ${totalMemberships - membershipsWithRoles}`)

    return createdMemberships

  } catch (error) {
    console.error('‚ùå Error seeding organization memberships:', error)
    throw error
  }
}

// Ï°∞ÏßÅÎ≥Ñ Î©§Î≤ÑÏã≠ ÌòÑÌô© Ï°∞Ìöå Ìï®Ïàò
export async function getOrganizationMembershipSummary(churchId: string) {
  const organizations = await prisma.organization.findMany({
    where: { churchId, isActive: true },
    include: {
      organizationMemberships: {
        where: { isActive: true },
        include: {
          member: {
            select: {
              id: true,
              name: true,
            },
          },
          role: {
            select: {
              name: true,
              isLeadership: true,
            },
          },
        },
      },
      _count: {
        select: {
          organizationMemberships: {
            where: { isActive: true },
          },
        },
      },
    },
    orderBy: [
      { level: 'asc' },
      { sortOrder: 'asc' },
      { name: 'asc' },
    ],
  })

  return organizations.map(org => ({
    id: org.id,
    name: org.name,
    code: org.code,
    level: org.level,
    totalMembers: org._count.organizationMemberships,
    leadershipMembers: org.organizationMemberships.filter(m => m.role?.isLeadership).length,
    generalMembers: org.organizationMemberships.filter(m => !m.role || !m.role.isLeadership).length,
    members: org.organizationMemberships.map(m => ({
      id: m.member.id,
      name: m.member.name,
      roleName: m.role?.name || 'ÏùºÎ∞ò Î©§Î≤Ñ',
      isLeadership: m.role?.isLeadership || false,
      isPrimary: m.isPrimary,
      joinDate: m.joinDate,
    })),
  }))
}

// Îã§Ï§ë ÏÜåÏÜç Î©§Î≤Ñ Ï°∞Ìöå Ìï®Ïàò
export async function getMultiMembershipMembers(churchId: string) {
  const members = await prisma.member.findMany({
    where: { churchId },
    include: {
      organizationMemberships: {
        where: { isActive: true },
        include: {
          organization: {
            select: {
              name: true,
              code: true,
            },
          },
          role: {
            select: {
              name: true,
              isLeadership: true,
            },
          },
        },
      },
    },
  })

  return members
    .filter(member => member.organizationMemberships.length > 1)
    .map(member => ({
      id: member.id,
      name: member.name,
      totalMemberships: member.organizationMemberships.length,
      organizations: member.organizationMemberships.map(m => ({
        name: m.organization.name,
        code: m.organization.code,
        roleName: m.role?.name || 'ÏùºÎ∞ò Î©§Î≤Ñ',
        isLeadership: m.role?.isLeadership || false,
        isPrimary: m.isPrimary,
      })),
    }))
}
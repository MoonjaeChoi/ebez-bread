generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Church {
  id                    String                 @id @default(cuid())
  name                  String
  address               String?
  phone                 String?
  email                 String?
  website               String?
  logoUrl               String?
  pastorName            String?
  description           String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accountCodes          AccountCode[]
  attendances           Attendance[]
  budgets               Budget[]
  departments           Department[]
  expenses              ExpenseReport[]
  members               Member[]
  notificationHistories NotificationHistory[]
  notificationQueues    NotificationQueue[]
  notificationTemplates NotificationTemplate[]
  offerings             Offering[]
  organizationRoles     OrganizationRole[]
  organizations         Organization[]
  positions             Position[]
  transactions          Transaction[]
  users                 User[]
  visitations           Visitation[]
  // 결재 관련 relations 추가
  approvalMatrices      ApprovalMatrix[]

  @@map("churches")
}

model User {
  id                       String               @id @default(cuid())
  email                    String               @unique
  name                     String
  phone                    String?
  role                     UserRole             @default(GENERAL_USER)
  isActive                 Boolean              @default(true)
  passwordChangeRequired   Boolean              @default(false)
  lastPasswordChange       DateTime?
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  churchId                 String
  password                 String?
  approvalSteps            ApprovalStep[]       @relation("ApprovalStepApprover")
  assignedApprovalSteps    ApprovalStep[]       @relation("ApprovalStepAssignee")
  approvedBudgetChanges    BudgetChange[]       @relation("BudgetChangeApprover")
  requestedBudgetChanges   BudgetChange[]       @relation("BudgetChangeRequester")
  approvedBudgets          Budget[]             @relation("BudgetApprover")
  createdBudgets           Budget[]             @relation("BudgetCreator")
  managedDepartments       Department[]         @relation("DepartmentBudgetManager")
  expenseReports           ExpenseReport[]      @relation("ExpenseRequester")
  notificationSettings     NotificationSetting?
  pushSubscription         PushSubscription?
  createdTransactions      Transaction[]        @relation("TransactionCreator")
  // 결재 관련 relations 추가
  requestedTransactions    Transaction[]        @relation("TransactionRequester")
  requestedApprovalFlows   ApprovalFlow[]       @relation("ApprovalRequester")
  transactionApprovalSteps TransactionApprovalStep[] @relation("TransactionApprovalStepApprover")
  createdApprovalMatrices  ApprovalMatrix[]     @relation("ApprovalMatrixCreator")
  
  church                   Church               @relation(fields: [churchId], references: [id], onDelete: Cascade)
  responsibleOrganizations Organization[]       @relation("OrganizationResponsible")
  createdOrganizations     Organization[]       @relation("OrganizationCreatedBy")
  updatedOrganizations     Organization[]       @relation("OrganizationUpdatedBy")
  membershipHistoryEntries OrganizationMembershipHistory[]

  @@map("users")
}

model Member {
  id                      String                   @id @default(cuid())
  name                    String
  phone                   String?
  email                   String?
  birthDate               DateTime?
  address                 String?
  photoUrl                String?
  gender                  Gender?
  maritalStatus           MaritalStatus?
  baptismDate             DateTime?
  confirmationDate        DateTime?
  registrationDate        DateTime                 @default(now())
  status                  MemberStatus             @default(ACTIVE)
  familyId                String?
  relationship            FamilyRelation?
  notes                   String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  churchId                String
  positionId              String?
  departmentId            String?
  attendances             Attendance[]
  church                  Church                   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  department              Department?              @relation(fields: [departmentId], references: [id])
  position                Position?                @relation(fields: [positionId], references: [id])
  offerings               Offering[]
  organizationMemberships OrganizationMembership[]
  visitations             Visitation[]

  @@map("members")
}

model Position {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  churchId    String
  members     Member[]
  church      Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("positions")
}

model Department {
  id              String       @id @default(cuid())
  name            String
  description     String?
  leaderId        String?
  parentId        String?
  budgetManagerId String?
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  churchId        String
  budgets         Budget[]
  budgetManager   User?        @relation("DepartmentBudgetManager", fields: [budgetManagerId], references: [id])
  church          Church       @relation(fields: [churchId], references: [id], onDelete: Cascade)
  parent          Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children        Department[] @relation("DepartmentHierarchy")
  members         Member[]

  @@map("departments")
}

model Offering {
  id           String       @id @default(cuid())
  amount       Decimal
  offeringType OfferingType
  description  String?
  offeringDate DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  churchId     String
  memberId     String
  church       Church       @relation(fields: [churchId], references: [id], onDelete: Cascade)
  member       Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("offerings")
}

model Attendance {
  id             String      @id @default(cuid())
  serviceType    ServiceType
  attendanceDate DateTime    @default(now())
  isPresent      Boolean     @default(true)
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  churchId       String
  memberId       String
  church         Church      @relation(fields: [churchId], references: [id], onDelete: Cascade)
  member         Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("attendances")
}

model Visitation {
  id            String            @id @default(cuid())
  visitDate     DateTime
  purpose       VisitationPurpose
  description   String?
  content       String?
  needsFollowUp Boolean           @default(false)
  followUpDate  DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  churchId      String
  memberId      String
  church        Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  member        Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("visitations")
}

model ExpenseReport {
  id              String          @id @default(cuid())
  title           String
  description     String?
  amount          Decimal         @db.Decimal(15, 2)
  category        ExpenseCategory
  status          ReportStatus    @default(PENDING)
  requestDate     DateTime        @default(now())
  approvedDate    DateTime?
  rejectedDate    DateTime?
  rejectionReason String?
  receiptUrl      String?
  budgetItemId    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  churchId        String
  requesterId     String
  currentStep     Int             @default(0)
  totalSteps      Int             @default(3)
  workflowStatus  WorkflowStatus  @default(DRAFT)
  organizationId  String?
  approvals       ApprovalStep[]
  budgetItem      BudgetItem?     @relation("BudgetItemExpenses", fields: [budgetItemId], references: [id])
  church          Church          @relation(fields: [churchId], references: [id], onDelete: Cascade)
  organization    Organization?   @relation("OrganizationExpenseReports", fields: [organizationId], references: [id])
  requester       User            @relation("ExpenseRequester", fields: [requesterId], references: [id])

  @@map("expense_reports")
}

model ApprovalStep {
  id              String         @id @default(cuid())
  expenseReportId String
  stepOrder       Int
  role            UserRole
  approverId      String?
  status          ApprovalStatus @default(PENDING)
  approvedAt      DateTime?
  rejectedAt      DateTime?
  comment         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  assignedUserId  String?
  approver        User?          @relation("ApprovalStepApprover", fields: [approverId], references: [id])
  assignedUser    User?          @relation("ApprovalStepAssignee", fields: [assignedUserId], references: [id])
  expenseReport   ExpenseReport  @relation(fields: [expenseReportId], references: [id], onDelete: Cascade)

  @@unique([expenseReportId, stepOrder])
  @@map("approval_steps")
}

model AccountCode {
  id                 String        @id @default(cuid())
  code               String        @unique
  name               String
  englishName        String?
  type               AccountType
  level              Int
  parentId           String?
  order              Int           @default(0)
  allowTransaction   Boolean       @default(false)
  isActive           Boolean       @default(true)
  isSystem           Boolean       @default(false)
  description        String?
  churchId           String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  church             Church?       @relation(fields: [churchId], references: [id])
  parent             AccountCode?  @relation("AccountHierarchy", fields: [parentId], references: [id])
  children           AccountCode[] @relation("AccountHierarchy")
  creditTransactions Transaction[] @relation("CreditAccount")
  debitTransactions  Transaction[] @relation("DebitAccount")

  @@map("account_codes")
}

model NotificationSetting {
  id                           String   @id @default(cuid())
  userId                       String   @unique
  emailEnabled                 Boolean  @default(true)
  smsEnabled                   Boolean  @default(false)
  pushEnabled                  Boolean  @default(true)
  inAppEnabled                 Boolean  @default(true)
  birthdayNotifications        Boolean  @default(true)
  visitationReminders          Boolean  @default(true)
  expenseApprovalNotifications Boolean  @default(true)
  systemNotifications          Boolean  @default(true)
  birthdayReminderDays         Int      @default(7)
  visitationReminderHours      Int      @default(24)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  user                         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model NotificationQueue {
  id            String                @id @default(cuid())
  type          NotificationType
  channel       NotificationChannel
  priority      NotificationPriority  @default(NORMAL)
  recipientId   String
  recipientType RecipientType         @default(USER)
  email         String?
  phone         String?
  title         String
  message       String
  templateData  String?
  status        NotificationStatus    @default(PENDING)
  scheduledAt   DateTime?
  sentAt        DateTime?
  failedAt      DateTime?
  errorMessage  String?
  retryCount    Int                   @default(0)
  maxRetries    Int                   @default(3)
  relatedId     String?
  relatedType   String?
  churchId      String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  history       NotificationHistory[]
  church        Church                @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@index([status, scheduledAt])
  @@index([churchId, status])
  @@map("notification_queue")
}

model NotificationHistory {
  id            String              @id @default(cuid())
  queueId       String?
  type          NotificationType
  channel       NotificationChannel
  recipientId   String
  recipientType RecipientType       @default(USER)
  email         String?
  phone         String?
  title         String
  message       String
  status        NotificationStatus
  sentAt        DateTime?
  errorMessage  String?
  relatedId     String?
  relatedType   String?
  churchId      String
  createdAt     DateTime            @default(now())
  church        Church              @relation(fields: [churchId], references: [id], onDelete: Cascade)
  queue         NotificationQueue?  @relation(fields: [queueId], references: [id])

  @@index([churchId, recipientId])
  @@index([churchId, type])
  @@index([createdAt])
  @@map("notification_history")
}

model NotificationTemplate {
  id        String              @id @default(cuid())
  name      String
  type      NotificationType
  channel   NotificationChannel
  subject   String?
  title     String
  content   String
  isActive  Boolean             @default(true)
  isDefault Boolean             @default(false)
  churchId  String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  church    Church              @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([churchId, type, channel, name])
  @@map("notification_templates")
}

model PushSubscription {
  id           String   @id @default(cuid())
  userId       String   @unique
  subscription String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

model Budget {
  id             String         @id @default(cuid())
  name           String
  description    String?
  year           Int
  quarter        Int?
  month          Int?
  totalAmount    Decimal        @db.Decimal(15, 2)
  status         BudgetStatus   @default(DRAFT)
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  churchId       String
  departmentId   String
  createdById    String
  approvedById   String?
  approvedAt     DateTime?
  organizationId String?
  budgetChanges  BudgetChange[]
  budgetItems    BudgetItem[]
  approver       User?          @relation("BudgetApprover", fields: [approvedById], references: [id])
  church         Church         @relation(fields: [churchId], references: [id])
  createdBy      User           @relation("BudgetCreator", fields: [createdById], references: [id])
  department     Department     @relation(fields: [departmentId], references: [id])
  organization   Organization?  @relation("OrganizationBudgets", fields: [organizationId], references: [id])

  @@map("budgets")
}

model BudgetItem {
  id              String           @id @default(cuid())
  name            String
  description     String?
  amount          Decimal          @db.Decimal(15, 2)
  category        BudgetCategory
  code            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  budgetId        String
  organizationId  String?
  budgetExecution BudgetExecution?
  budget          Budget           @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  organization    Organization?    @relation("OrganizationBudgetItems", fields: [organizationId], references: [id])
  expenseReports  ExpenseReport[]  @relation("BudgetItemExpenses")

  @@map("budget_items")
}

model BudgetExecution {
  id              String     @id @default(cuid())
  totalBudget     Decimal    @db.Decimal(15, 2)
  usedAmount      Decimal    @default(0) @db.Decimal(15, 2)
  pendingAmount   Decimal    @default(0) @db.Decimal(15, 2)
  remainingAmount Decimal    @db.Decimal(15, 2)
  executionRate   Float      @default(0)
  lastUpdated     DateTime   @updatedAt
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  budgetItemId    String     @unique
  budgetItem      BudgetItem @relation(fields: [budgetItemId], references: [id], onDelete: Cascade)

  @@map("budget_executions")
}

model BudgetChange {
  id          String             @id @default(cuid())
  changeType  BudgetChangeType
  amount      Decimal            @db.Decimal(15, 2)
  reason      String
  status      BudgetChangeStatus @default(PENDING)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  budgetId    String
  requestedBy String
  approvedBy  String?
  approvedAt  DateTime?
  fromItemId  String?
  toItemId    String?
  approver    User?              @relation("BudgetChangeApprover", fields: [approvedBy], references: [id])
  budget      Budget             @relation(fields: [budgetId], references: [id])
  requester   User               @relation("BudgetChangeRequester", fields: [requestedBy], references: [id])

  @@map("budget_changes")
}

model Transaction {
  id              String          @id @default(cuid())
  description     String
  amount          Decimal         @db.Decimal(15, 2)
  transactionDate DateTime
  reference       String?
  voucherNumber   String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  debitAccountId  String
  creditAccountId String
  churchId        String
  createdById     String
  
  // 결재 관련 필드 추가
  status          TransactionStatus @default(DRAFT)
  organizationId  String?         // 요청 조직
  requesterId     String?         // 요청자 (createdBy와 다를 수 있음)
  category        ApprovalMatrixCategory?
  submittedAt     DateTime?       // 결재 제출일
  approvedAt      DateTime?       // 최종 승인일
  rejectedAt      DateTime?       // 반려일
  rejectionReason String?         // 반려 사유
  
  // Relations
  church          Church          @relation(fields: [churchId], references: [id])
  createdBy       User            @relation("TransactionCreator", fields: [createdById], references: [id])
  requester       User?           @relation("TransactionRequester", fields: [requesterId], references: [id])
  organization    Organization?   @relation("TransactionOrganization", fields: [organizationId], references: [id])
  creditAccount   AccountCode     @relation("CreditAccount", fields: [creditAccountId], references: [id])
  debitAccount    AccountCode     @relation("DebitAccount", fields: [debitAccountId], references: [id])
  
  // 결재 워크플로우 연결
  approvalFlow    ApprovalFlow?
  
  @@index([status])
  @@index([organizationId])
  @@index([requesterId])
  @@index([category])
  @@map("transactions")
}

model Organization {
  id                      String                   @id @default(cuid())
  code                    String                   @unique
  name                    String
  englishName             String?
  level                   OrganizationLevel
  description             String?
  isActive                Boolean                  @default(true)
  sortOrder               Int                      @default(0)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  createdById             String?
  updatedById             String?
  parentId                String?
  churchId                String
  budgetItems             BudgetItem[]             @relation("OrganizationBudgetItems")
  budgets                 Budget[]                 @relation("OrganizationBudgets")
  expenseReports          ExpenseReport[]          @relation("OrganizationExpenseReports")
  organizationMemberships OrganizationMembership[]
  roleAssignments         OrganizationRoleAssignment[]
  inheritedRoleAssignments OrganizationRoleAssignment[] @relation("RoleInheritanceFrom")
  // 결재 관련 relations 추가
  transactions            Transaction[]            @relation("TransactionOrganization")
  approvalFlows           ApprovalFlow[]
  transactionApprovalSteps TransactionApprovalStep[] @relation("TransactionApprovalStepOrganization")
  approvalMatrices        ApprovalMatrix[]         @relation("ApprovalMatrixOrganization")
  
  church                  Church                   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  parent                  Organization?            @relation("OrganizationHierarchy", fields: [parentId], references: [id])
  children                Organization[]           @relation("OrganizationHierarchy")
  responsibleUsers        User[]                   @relation("OrganizationResponsible")
  createdBy               User?                    @relation("OrganizationCreatedBy", fields: [createdById], references: [id])
  updatedBy               User?                    @relation("OrganizationUpdatedBy", fields: [updatedById], references: [id])

  @@index([churchId, level])
  @@index([churchId, parentId])
  @@index([code])
  @@map("organizations")
}

model OrganizationRole {
  id           String                   @id @default(cuid())
  name         String
  englishName  String?
  description  String?
  level        Int                      @default(0)
  sortOrder    Int                      @default(0)
  isActive     Boolean                  @default(true)
  isLeadership Boolean                  @default(false)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  churchId     String
  memberships     OrganizationMembership[]
  roleAssignments OrganizationRoleAssignment[]
  church          Church                   @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([churchId, name])
  @@index([churchId, level])
  @@index([churchId, isLeadership])
  @@map("organization_roles")
}

model OrganizationMembership {
  id             String            @id @default(cuid())
  memberId       String
  organizationId String
  roleId         String?
  joinDate       DateTime          @default(now())
  endDate        DateTime?
  isActive       Boolean           @default(true)
  isPrimary      Boolean           @default(false)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  member         Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           OrganizationRole? @relation(fields: [roleId], references: [id])
  history        OrganizationMembershipHistory[]

  @@unique([memberId, organizationId, isActive])
  @@index([memberId, isActive])
  @@index([organizationId, isActive])
  @@index([roleId])
  @@index([joinDate])
  @@map("organization_memberships")
}

model OrganizationMembershipHistory {
  id             String                     @id @default(cuid())
  membershipId   String
  changeType     MembershipChangeType
  previousValue  String?                    // JSON format for previous values
  newValue       String?                    // JSON format for new values
  reason         String?
  createdAt      DateTime                   @default(now())
  createdById    String
  membership     OrganizationMembership     @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdBy      User                       @relation(fields: [createdById], references: [id])
  
  @@index([membershipId])
  @@index([changeType])
  @@index([createdAt])
  @@map("organization_membership_history")
}

model OrganizationRoleAssignment {
  id             String           @id @default(cuid())
  organizationId String
  roleId         String
  isInherited    Boolean          @default(false)  // true면 상위 조직으로부터 상속받은 직책
  inheritedFrom  String?          // 어느 조직으로부터 상속받았는지
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      String?
  updatedBy      String?
  
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           OrganizationRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  inheritedFromOrg Organization?  @relation("RoleInheritanceFrom", fields: [inheritedFrom], references: [id])

  @@unique([organizationId, roleId])
  @@index([organizationId])
  @@index([roleId])
  @@index([inheritedFrom])
  @@map("organization_role_assignments")
}

enum UserRole {
  SUPER_ADMIN
  FINANCIAL_MANAGER
  MINISTER
  COMMITTEE_CHAIR
  DEPARTMENT_HEAD
  DEPARTMENT_ACCOUNTANT
  GENERAL_USER
  BUDGET_MANAGER
  DEPARTMENT_BUDGET
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  TRANSFERRED
  DECEASED
}

enum FamilyRelation {
  HEAD
  SPOUSE
  CHILD
  PARENT
  SIBLING
  OTHER
}

enum OfferingType {
  TITHE
  THANKSGIVING
  SUNDAY_OFFERING
  SPECIAL
  MISSION
  BUILDING
  OTHER
}

enum ServiceType {
  SUNDAY_MORNING
  SUNDAY_EVENING
  WEDNESDAY
  DAWN
  FRIDAY
  SATURDAY
  SPECIAL
}

enum VisitationPurpose {
  GENERAL
  NEW_FAMILY
  HOSPITAL
  BIRTHDAY
  CONDOLENCE
  COUNSELING
  EVANGELISM
  EVENT
  OTHER
}

enum ExpenseCategory {
  OFFICE
  FACILITY
  EDUCATION
  MISSION
  WELFARE
  EVENT
  OTHER
}

enum ReportStatus {
  PENDING           // 승인대기
  DEPARTMENT_APPROVED  // 부장승인 
  APPROVED          // 승인됨
  REJECTED
  PAID
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum NotificationType {
  BIRTHDAY_REMINDER
  VISITATION_REMINDER
  EXPENSE_APPROVAL_REQUEST
  EXPENSE_APPROVED
  EXPENSE_REJECTED
  SYSTEM_ANNOUNCEMENT
  WELCOME_NEW_MEMBER
  PAYMENT_REMINDER
  CUSTOM
  EXPENSE_WORKFLOW_STEP_APPROVAL
  EXPENSE_WORKFLOW_APPROVED
  EXPENSE_WORKFLOW_REJECTED
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationStatus {
  PENDING
  SENDING
  SENT
  FAILED
  CANCELLED
}

enum RecipientType {
  USER
  MEMBER
  GROUP
}

enum BudgetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  ACTIVE
  CLOSED
}

enum BudgetCategory {
  PERSONNEL
  OPERATIONS
  MANAGEMENT
  FACILITIES
  EDUCATION
  MINISTRY
  MISSION
  WELFARE
  EVENT
  OTHER
}

enum BudgetChangeType {
  INCREASE
  DECREASE
  TRANSFER
}

enum BudgetChangeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WorkflowStatus {
  DRAFT
  SUBMITTED
  IN_PROGRESS
  APPROVED
  REJECTED
  CANCELLED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  SKIPPED
}

enum OrganizationLevel {
  LEVEL_1
  LEVEL_2
  LEVEL_3
  LEVEL_4
  LEVEL_5
}

enum MembershipChangeType {
  ROLE_CHANGED
  STATUS_CHANGED
  PRIMARY_CHANGED
  JOIN_DATE_CHANGED
  END_DATE_CHANGED
  NOTES_CHANGED
  ACTIVATED
  DEACTIVATED
  TRANSFERRED_IN
  TRANSFERRED_OUT
}

// 결재 관련 Enum 타입들
enum TransactionStatus {
  DRAFT          // 임시저장
  PENDING        // 결재 대기
  IN_REVIEW      // 결재 중
  APPROVED       // 승인 완료
  REJECTED       // 반려
  CANCELLED      // 취소
}

enum ApprovalFlowStatus {
  PENDING        // 결재 대기
  IN_PROGRESS    // 결재 진행 중
  APPROVED       // 최종 승인
  REJECTED       // 반려
  ESCALATED      // 에스컬레이션
  CANCELLED      // 취소
}

enum ApprovalStepStatus {
  PENDING        // 결재 대기
  APPROVED       // 승인
  REJECTED       // 반려
  SKIPPED        // 건너뜀
  ESCALATED      // 상위로 에스컬레이션
  DELEGATED      // 위임
}

enum ApprovalMatrixCategory {
  MINISTRY       // 사역비
  SUPPLIES       // 소모품
  EQUIPMENT      // 장비/기자재
  EVENT          // 행사비
  CONSTRUCTION   // 건축/시설
  FACILITIES     // 시설 운영
  SALARY         // 인건비
  BONUS          // 상여금
  BENEFITS       // 복리후생
  UTILITIES      // 공과금
  MAINTENANCE    // 유지보수
  OTHER          // 기타
}

// 결재 워크플로우 모델
model ApprovalFlow {
  id              String              @id @default(cuid())
  transactionId   String              @unique
  transaction     Transaction         @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  totalSteps      Int
  currentStep     Int                 @default(1)
  status          ApprovalFlowStatus  @default(PENDING)
  
  // 결재 요청 정보
  requesterId     String
  requester       User                @relation("ApprovalRequester", fields: [requesterId], references: [id])
  organizationId  String
  organization    Organization        @relation(fields: [organizationId], references: [id])
  
  // 결재 메타 정보
  amount          Decimal             @db.Decimal(15, 2)
  category        ApprovalMatrixCategory
  priority        String              @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  
  steps           TransactionApprovalStep[]
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  completedAt     DateTime?
  
  @@index([status])
  @@index([requesterId])
  @@index([organizationId])
  @@map("approval_flows")
}

model TransactionApprovalStep {
  id              String              @id @default(cuid())
  flowId          String
  flow            ApprovalFlow        @relation(fields: [flowId], references: [id], onDelete: Cascade)
  
  stepOrder       Int
  approverId      String
  approver        User                @relation("TransactionApprovalStepApprover", fields: [approverId], references: [id])
  approverRole    String              // 결재 당시의 직책명 (이력 보존)
  organizationId  String
  organization    Organization        @relation("TransactionApprovalStepOrganization", fields: [organizationId], references: [id])
  
  status          ApprovalStepStatus  @default(PENDING)
  isRequired      Boolean             @default(true)
  isParallel      Boolean             @default(false) // 병렬 결재 여부
  
  // 결재 처리 정보
  processedAt     DateTime?
  comments        String?
  attachments     String?             // JSON array of file URLs
  
  // 에스컬레이션 정보
  escalatedFrom   String?             // 원래 결재자 ID
  escalatedTo     String?             // 에스컬레이션 대상자 ID
  escalationReason String?
  timeoutHours    Int?                @default(24)
  
  // 위임 정보
  delegatedFrom   String?             // 위임자 ID
  delegatedTo     String?             // 피위임자 ID
  delegationReason String?
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([flowId])
  @@index([approverId])
  @@index([status])
  @@index([stepOrder])
  @@map("transaction_approval_steps")
}

// 결재 매트릭스 설정
model ApprovalMatrix {
  id              String              @id @default(cuid())
  name            String
  description     String?
  churchId        String
  church          Church              @relation(fields: [churchId], references: [id], onDelete: Cascade)
  
  // 적용 조건
  category        ApprovalMatrixCategory
  minAmount       Decimal?            @db.Decimal(15, 2)
  maxAmount       Decimal?            @db.Decimal(15, 2)
  organizationId  String?             // 특정 조직에만 적용
  organization    Organization?       @relation("ApprovalMatrixOrganization", fields: [organizationId], references: [id])
  
  // 결재선 설정
  approvalLevels  ApprovalMatrixLevel[]
  
  isActive        Boolean             @default(true)
  priority        Int                 @default(0) // 높을수록 우선 적용
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  createdById     String
  createdBy       User                @relation("ApprovalMatrixCreator", fields: [createdById], references: [id])
  
  @@index([churchId])
  @@index([category])
  @@index([organizationId])
  @@map("approval_matrices")
}

// 결재 매트릭스 레벨 설정
model ApprovalMatrixLevel {
  id              String              @id @default(cuid())
  matrixId        String
  matrix          ApprovalMatrix      @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  
  levelOrder      Int
  requiredRoles   String[]            // 필요한 직책들 (JSON array)
  organizationLevel String            // SAME, PARENT, ROOT
  isRequired      Boolean             @default(true)
  isParallel      Boolean             @default(false)
  timeoutHours    Int                 @default(24)
  
  // 에스컬레이션 룰
  escalationRules String?             // JSON array of escalation rules
  
  @@index([matrixId])
  @@index([levelOrder])
  @@map("approval_matrix_levels")
}
